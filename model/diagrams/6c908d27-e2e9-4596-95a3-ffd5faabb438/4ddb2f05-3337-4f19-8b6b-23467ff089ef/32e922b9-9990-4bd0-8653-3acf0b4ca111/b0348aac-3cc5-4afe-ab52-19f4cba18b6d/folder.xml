<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Node.js's command-line tools"
    id="b0348aac-3cc5-4afe-ab52-19f4cba18b6d"
    documentation="The basic installation of Node.js includes two commands, node and npm. We've already seen the node command in action. It's used either for running command-line scripts or server processes. The other, npm, is a package manager for Node.js.&#xA;The easiest way to verify that your Node.js installation works is also the best way to get help with Node.js. Type the following command:&#xA;   $ node --help&#xA;   Usage: node [options] [ -e script | script.js | - ] [arguments]&#xA;          node inspect script.js [arguments]&#xA;   Options:&#xA;     -v, --version print Node.js version&#xA;     -e, --eval script evaluate script&#xA;     -p, --print evaluate script and print result&#xA;     -c, --check syntax check script without executing&#xA;     -i, --interactive always enter the REPL even if stdin&#xA;                                does not appear to be a terminal&#xA;     -r, --require module to preload (option can be repeated)&#xA;     - script read from stdin (default; interactive mode if a tty)&#xA;     --inspect[=[host:]port] activate inspector on host:port&#xA;--inspect-brk[=[host:]port]&#xA;--inspect-port=[host:]port&#xA;(default: 127.0.0.1:9229)&#xA;activate inspector on host:port&#xA;and break at start of user script&#xA;set host:port for inspector&#xA;   ... many more options&#xA;   Environment variables:&#xA;   NODE_DEBUG ','-separated list of core modules&#xA;                                that should print debug information&#xA;   NODE_DISABLE_COLORS set to 1 to disable colors in the REPL&#xA;   NODE_EXTRA_CA_CERTS path to additional CA certificates&#xA;                                file&#xA;   NODE_ICU_DATA data path for ICU (Intl object) data&#xA;                                (will extend linked-in data)&#xA;   NODE_NO_WARNINGS set to 1 to silence process warnings&#xA;   NODE_NO_HTTP2 set to 1 to suppress the http2 module&#xA;   NODE_OPTIONS set CLI options in the environment&#xA;                                via a space-separated list&#xA;   NODE_PATH ':'-separated list of directories&#xA;                                prefixed to the module search path&#xA;   NODE_PENDING_DEPRECATION set to 1 to emit pending deprecation&#xA;                                warnings&#xA;   NODE_REPL_HISTORY path to the persistent REPL history&#xA;                                file&#xA;   NODE_REDIRECT_WARNINGS write warnings to path instead of&#xA;                                stderr&#xA;   OPENSSL_CONF load OpenSSL configuration from file&#xA;   Documentation can be found at https://nodejs.org/&#xA;Note that there are options for both Node.js and V8 (not shown in the previous command line). Remember that Node.js is built on top of V8; it has its own universe of options that largely focus on details of bytecode compilation or garbage collection and heap algorithms. Enter node --v8-options to see the full list of them.&#xA;On the command line, you can specify options, a single script file, and a list of arguments to that script. We'll discuss script arguments further in the next section, Running a simple script with Node.js.&#xA;Running Node.js with no arguments plops you into an interactive JavaScript shell:&#xA;   $ node&#xA;   > console.log('Hello, world!');&#xA;   Hello, world!&#xA;   undefined&#xA;Any code you can write in a Node.js script can be written here. The command interpreter gives a good Terminal-oriented user experience and is useful for interactively playing with your code. You do play with your code, don't you? Good!&#xA;"/>
