<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Conversion to async functions and the Promise paradigm"
    id="fc6a5b3b-77e4-4580-9f9a-b06c42ce14a0"
    documentation="In the previous section we discussed the util.promisify and its ability to convert a callback-oriented function into one that returns a Promise. The latter play well within async functions and therefore it is preferable for functions to return a Promise.&#xA;To be more precise, util.promisify is to be given a function that uses the error- first-callback paradigm. The last argument of such functions is a callback function whose first argument is interpreted as an error indicator, hence the phrase error-first- callback. What util.promisify returns is another function that returns a Promise.&#xA;The Promise serves the same purpose as the error-first-callback. If an error is indicated, the Promise resolves to the rejected status, while if success is indicated the Promise resolves to a success status. As we see in these examples, within an async function the Promise is handled very nicely.&#xA;The Node.js ecosystem has a large body of functions using the error-first-callback. The community has begun a conversion process where functions will return a Promise, and possibly also take an error-first-callback for API compatibility.&#xA;One of the new features in Node.js 10 is an example of such a conversion. Within the fs module is a submodule, named fs.promises, with the same API but producing Promise objects. We could rewrite the previous example as so:&#xA;   const fs = require('fs').promises;&#xA;   (async () => {&#xA;    var dir = '.';&#xA;    if (process.argv[2]) dir = process.argv[2];&#xA;    const files = await fs.readdir(dir);&#xA;for (let fn of files) {&#xA;        console.log(fn);&#xA;    }&#xA;   })().catch(err => { console.error(err); });&#xA;As you can see, the functions in the fs.promises module returns a Promise without requiring a callback function. The new program, which you can save as ls2- promises.js, is run as so:&#xA;   $ node ls2-promises.js&#xA;   (node:40329) ExperimentalWarning: The fs.promises API is experimental&#xA;   app.js&#xA;   ls.js&#xA;   ls2-promises.js&#xA;   ls2.js&#xA;The API is currently in an experimental state and therefore we're shown this warning.&#xA;Another choice is a 3rd party module, fs-extra. This module has an extended API beyond the standard fs module. On the one hand its functions return a Promise if no callback function is provided, or else invokes the callback. In addition it includes several useful functions.&#xA;In the rest of this book we will be using fs-extra because of those additional functions. For documentation of the module, see: https:/​/​www.​npmjs.​com/​package/ fs-​extra."/>
