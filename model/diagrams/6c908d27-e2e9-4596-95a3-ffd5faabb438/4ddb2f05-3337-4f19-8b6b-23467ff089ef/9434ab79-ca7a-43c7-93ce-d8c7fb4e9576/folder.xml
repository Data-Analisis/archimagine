<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Installing multiple Node.js instances with nvm "
    id="9434ab79-ca7a-43c7-93ce-d8c7fb4e9576"
    documentation="Normally, you won't install multiple versions of Node.js and doing so adds complexity to your system. But if you are hacking on Node.js itself, or are testing your software against different Node.js releases, you may want to have multiple Node.js installations. The method to do so is a simple variation on what we've already discussed.&#xA;Earlier, while discussing building Node.js from source, we noted that one can install multiple Node.js instances in separate directories. It's only necessary to build from source if you need a customized Node.js build, and most folks will be satisfied with pre-built Node.js binaries. They, too, can be installed into separate directories.&#xA;To switch between Node.js versions is simply a matter of changing the PATH variable (on POSIX systems), as follows, using the directory where you installed Node.js:&#xA;   $ export PATH=/usr/local/node/VERSION-NUMBER/bin:${PATH}&#xA;It starts to be a little tedious to maintain this after a while. For each release, you have to set up Node.js, NPM, and any third-party modules you desire in your Node.js installation. Also, the command shown to change your PATH is not quite optimal. Inventive programmers have created several version managers to simplify managing multiple Node.js/NPM releases and providing commands to change your PATH the smart way:&#xA;Node version manager: https:/​/​github.​com/​tj/​n&#xA;Node version manager: https:/​/​github.​com/​creationix/​nvm&#xA;Both maintain multiple simultaneous versions of Node and let you easily switch between versions. Installation instructions are available on their respective websites.&#xA;For example, with nvm, you can run commands like these: $ nvm ls&#xA; ...&#xA;v6.0.0&#xA;v6.1.0&#xA;v6.2.2&#xA;v6.3.1&#xA;v6.4.0&#xA;       ...&#xA;   v6.11.2&#xA;    v7.0.0&#xA;    v7.1.0&#xA;   v7.10.0&#xA;    v8.0.0&#xA;    v8.1.3&#xA;    v8.2.1&#xA;    v8.5.0&#xA;    v8.9.1&#xA;    v8.9.3&#xA;    v9.2.0&#xA;    v9.4.0&#xA;    v9.5.0&#xA;   v9.10.1&#xA;   v9.11.1&#xA;-> v10.0.0&#xA;     -> system&#xA;node -> stable (-> v8.9.1) (default)&#xA;stable -> 8.9 (-> v8.9.1) (default)&#xA;iojs -> N/A (default)&#xA;$ nvm use 10&#xA;Now using node v10.0.0 (npm v5.6.0)&#xA;$ node --version&#xA;v10.0.0&#xA;$ nvm use v4.2&#xA;Now using node v4.2.0 (npm v2.14.7)&#xA;$ node --version&#xA;v4.2.0&#xA;$ nvm install 9&#xA;Downloading&#xA;https://nodejs.org/dist/v9.2.0/node-v9.2.0-darwin-x64.tar.xz...&#xA;######################################################################&#xA;## 100.0%&#xA;WARNING: checksums are currently disabled for node.js v4.0 and later&#xA;Now using node v9.2.0 (npm v5.5.1)&#xA; $ node --version&#xA;   v9.2.0&#xA;   $ which node&#xA;   /Users/david/.nvm/versions/node/v9.2.0/bin/node&#xA;   $ /usr/local/bin/node --version&#xA;   v8.9.1&#xA;   $ /opt/local/bin/node --version&#xA;   v8.9.1&#xA;This demonstrates that you can have a system-wide Node.js installed, keep multiple private Node.js versions managed by nvm, and switch between them as needed. When new Node.js versions are released, they are simple to install with nvm even if the official packaged version for your OS doesn't immediately update.&#xA;"/>
