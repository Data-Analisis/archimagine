<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="Summary"
    id="817685bb-7e34-47b7-b7e8-cc518469d5b5"
    documentation="In this chapter, we went through a real whirlwind of different database technologies. While we looked at the same seven functions over and over, it's useful to be exposed to the various data storage models and ways of getting things done. Even so, we only touched the surface of options for accessing databases and data storage engines from Node.js.&#xA;By abstracting the model implementations correctly, we were able to easily switch data storage engines while not changing the rest of the application. We did skip around the issue of setting up database servers. As promised, we'll get to that&#xA;in Chapter 10, Deploying Node.js Applications, when we explore production deployment of Node.js applications.&#xA;By focusing the model code on the purpose of storing data, both the models and the application should be easier to test. The application can be tested with a mock data module that provides known predictable notes that can be checked predictably. We'll look at this in more depth in Chapter 11, Unit Testing and Functional Testing.&#xA;In the next chapter, we'll focus on authenticating our users using OAuth2.&#xA;"/>
