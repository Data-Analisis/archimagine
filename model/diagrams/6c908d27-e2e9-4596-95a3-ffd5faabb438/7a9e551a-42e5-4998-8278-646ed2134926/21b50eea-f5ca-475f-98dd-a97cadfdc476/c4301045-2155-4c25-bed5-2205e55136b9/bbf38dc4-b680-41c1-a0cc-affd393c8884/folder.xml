<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="CommonJS/Node.js module format"
    id="bbf38dc4-b680-41c1-a0cc-affd393c8884"
    documentation="We've already seen a couple of examples of this module format, with the simple.js example, and the programs we examined in Chapter 2, Setting up Node.js. So let's take a closer look.&#xA;CommonJS modules are stored in files with the extension .js.&#xA;Loading a CommonJS module is a synchronous operation. That means that when the require('modulename') function call returns, the module has been located and completely read into memory and is ready to go. The module is cached in memory so that subsequent require('modulename') calls return immediately, and all return the exact same object.&#xA;Node.js modules provide a simple encapsulation mechanism to hide implementation details while exposing an API. Modules are treated as if they were written as follows:&#xA;   (function() { ... contents of module file ... })();&#xA;Thus, everything within the module is contained within an anonymous private namespace context. This is how the global object problem is resolved; everything in a module that looks global is actually contained within this private context.&#xA;Objects and functions can be exposed from a CommonJS module by means of two free variables Node.js inserts into this private context: module and exports:&#xA;The module object contains several fields that you might find useful. Refer to the online Node.js documentation for details.&#xA;The exports object is an alias of the module.exports field. This means that the following two lines of code are equivalent:&#xA;   exports.funcName = function(arg, arg1) { ... };&#xA;   module.exports.funcName = function(arg, arg2) { .. };&#xA;Your code can break the alias between the two if you do this:&#xA;   exports = function(arg, arg1) { ... };&#xA;Do not do that, because exports will no longer be equivalent to module.exports. If your intent is to assign a single object or function to be what's returned by require, do this instead:&#xA;   module.exports = function(arg, arg1) { ... };&#xA;Some modules do export a single function because that's how the module author envisioned delivering the desired functionality.&#xA;The Node.js package format is derived from the CommonJS module system (http://commonjs.org). When developed, the CommonJS team aimed to fill a gap in the JavaScript ecosystem. At that time, there was no standard module system, making it trickier to package JavaScript applications. The require function, the exports object, and other aspects of Node.js modules come directly from the CommonJS Modules/1.0 spec."/>
