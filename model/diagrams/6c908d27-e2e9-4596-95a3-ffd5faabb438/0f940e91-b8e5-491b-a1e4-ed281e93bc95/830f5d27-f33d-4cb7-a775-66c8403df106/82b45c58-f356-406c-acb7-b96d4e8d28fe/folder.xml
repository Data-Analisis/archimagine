<archimate:Folder
    xmlns:archimate="http://www.archimatetool.com/archimate"
    name="JavaScript at all levels of the stack"
    id="82b45c58-f356-406c-acb7-b96d4e8d28fe"
    documentation="Having the same programming language on the server and client has been a long- time dream on the web. This dream dates back to the early days of Java, where Java applets were to be the frontend to server applications written in Java, and JavaScript was originally envisioned as a lightweight scripting language for those applets. Java never fulfilled its hype as a client-side programming language, for various reasons. We ended up with JavaScript as the principle in-browser, client-side language, rather than Java. Typically, the frontend JavaScript developers were in a different language universe than the server-side team, who was likely to be coding in PHP, Java, Ruby, or Python.&#xA;Over time, in-browser JavaScript engines became incredibly powerful, letting us write ever-more complex browser-side applications. With Node.js, we may finally be able to implement applications with the same programming language on the client and server by having JavaScript at both ends of the web, in the browser and server.&#xA;A common language for frontend and backend offers several potential benefits:&#xA;The same programming staff can work on both ends of the wire Code can be migrated between server and client more easily Common data formats (JSON) exist between server and client Common software tools exist for server and client&#xA;Common testing or quality reporting tools for server and client&#xA;When writing web applications, view templates can be used on both sides&#xA;The JavaScript language is very popular due to its ubiquity in web browsers. It compares favorably against other languages while having many modern, advanced language concepts. Thanks to its popularity, there is a deep talent pool of experienced JavaScript programmers out there."/>
